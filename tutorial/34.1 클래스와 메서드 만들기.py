# Unit 34. 클래스 사용하기
"""
​클래스는 객체를 표현하기 위한 문법입니다. 예를 들어 게임을 만든다고 하면 기사, 마법사, 궁수, 사제 등 직업별로 클래스를 만들어서 표현할 수 있습니다.
물론 집, 자동차, 나무 등도 클래스로 표현할 수 있습니다.
특히 프로그래밍에서는 현실 세계에 있는 개념들뿐만 아니라 컴퓨터 안에서만 쓰이는 개념들도 클래스로 만들어서 표현합니다.
웹 브라우저에서 내용이 길어지면 보이는 스크롤 바, 프로그램에서 주로 볼 수 있는 버튼, 체크 박스 등이 대표적입니다.

지금까지 나온 기사, 마법사, 궁수, 사제, 집, 자동차, 나무, 스크롤 바, 버튼, 체크 박스처럼 특정한 개념이나 모양으로 존재하는 것을 객체(object)라고 부릅니다. 그리고 프로그래밍으로 객체를 만들 때 사용하는 것이 클래스입니다.
그럼 게임의 기사 캐릭터를 클래스로 표현하려면 무엇이 필요할까요? 간단합니다. 일단 게임 캐릭터는 체력, 마나, 물리 공격력, 주문력 등이 필요합니다. 그리고 기사 캐릭터는 칼로 베기, 찌르기 등의 스킬이 있어야 합니다.
여기서 체력, 마나, 물리 공격력, 주문력 등의 데이터를 클래스의 속성(attribute)이라 부르고, 베기, 찌르기 등의 기능을 메서드(method)라고 부릅니다.

이렇게 프로그래밍 방법을 객체지향(object oriented) 프로그래밍이라고 합니다. 
객체지향 프로그래밍은 복잡한 문제를 잘게 나누어 객체로 만들고, 객체를 조합해서 문제를 해결합니다. 따라서 현실 세계의 복잡한 문제를 처리하는데 유용하며 기능을 개선하고 발전시킬 때도 해당 클래스만 수정하면 되므로 유지 보수에도 효율적입니다.
지금까지 숫자 1, 2, 3 문자 'a', 'b', 'c', 리스트, 딕셔너리 등을 조합해서 프로그램을 만들었는데 사실 파이썬에서는 이 모든 것이 객체입니다.

객체는 데이터(값)와 그 데이터를 처리하는 동작(메서드)을 함께 포함하는 파이썬의 기본 단위입니다.
파이썬에서 모든 것이 객체입니다. 숫자, 문자열, 리스트, 함수, 클래스 등 모든 데이터가 객체로 취급됩니다.
객체는 [데이터(속성): 객체가 가지고 있는 값]과 [동작(메서드): 객체가 할 수 있는 일(함수처럼 호출 가능)] 이 두가지를 포함합니다.

왜 객체를 사용할까?
현실 세계를 코드로 더 쉽게 표현할 수 있기 때문.
데이터를 잘 구조화하고 재사용 가능하게 만들어준다.

이번에는 클래스를 사용해서 객체를 표현하고 만드는 방법을 알아보겠습니다.
"""




## 34.1 클래스와 메서드 만들기
"""
클래스는 class에 클래스 이름을 지정하고 :(콜론)을 붙인 뒤 다음 줄부터 def로 메서드를 작성하면 됩니다. 여기서 메서드는 클래스 안에 들어있는 함수를 뜻합니다.

클래스 이름을 짓는 방법은 변수와 같습니다. 보통 파이썬에서는 클래스의 이름은 대문자로 시작합니다.
그리고 메서드 작성 방법은 함수와 같으며 코드는 반드시 들여쓰기를 해야 합니다(들여쓰기 규칙은 if, for, while과 같습니다).
특히 메서드의 첫 번째 매개변수는 반드시 self를 지정해야 합니다.

class 클래스이름:
    def 메서드(self):
        코드

이제 간단한 사람 클래스를 작성해보겠습니다.
"""
class Person :
    def greeting(self) :
        print('Hello')

james = Person()          # 클래스에 ()(괄호)를 붙인 뒤 변수에 할당
"""
Person으로 변수 james를 만들었는데 이 james가 Person의 인스턴스(instance)입니다. 클래스는 특정 개념을 표현만 할뿐 사용을 하려면 인스턴스를 생성해야 합니다.
인스턴스란 클래스를 사용하여 실제로 만들어진 객체입니다.(여기서는 james라는 변수가 객체)
"""




### 34.1.1  메서드 호출하기
"""
이제 메서드를 호출해보겠습니다. 메서드는 클래스가 아니라 인스턴스를 통해 호출합니다. 다음과 같이 인스턴스 뒤에 .(점)을 붙이고 메서드를 호출하면 됩니다.
james.greeting을 호출하니 'Hello'가 출력되었습니다. 이렇게 인스턴스를 통해 호출하는 메서드를 인스턴스 메서드라고 부릅니다.
인스턴스는 특정 클래스에서 만들어진 개별 객체를 의미합니다.
인스턴스는 클래스에서 정의한 속성과 메서드를 사용할 수 있습니다.

인스턴스.메서드()
"""
class Person :
    def greeting(self) :
        print('Hello')

james = Person()
james.greeting()




### 34.1.2  파이썬에서 흔히 볼 수 있는 클래스
"""
지금까지 사용한 int, list, dict 등도 사실 클래스입니다. 우리는 이 클래스로 인스턴스를 만들고 메서드를 사용했습니다.
잘 보면 Person으로 인스턴스를 만드는 방법과 똑같습니다.
물론 정수는 매우 자주 사용하므로 int를 생략하고 10을 바로 넣습니다. 그리고 리스트와 딕셔너리도 자주 사용하므로 축약된 문법인 [ ]과 { }를 제공하지만 클래스인 것은 같습니다.
"""
a = int(10)                 # int 클래스에 10을 넣어서 인스턴스 a를 만들었습니다.
print(a)

b = list(range(10))         #  list 클래스에 range(10)을 넣어서 인스턴스 b를 만들었습니다.
print(b)

c = dict(x=10, y=20)        # dict 클래스에 x=10, y=20을 넣어서 인스턴스 c를 만들었습니다.
print(c)


""" 인스턴스 d에서 메서드 append를 호출해서 값을 추가 합니다. 이 부분도 지금까지 메서드를 만들고 사용한 것과 같은 방식입니다. """
d = list(range(11))
d.append(20)
print(d)


""" 
즉, 파이썬에서는 자료형도 클래스입니다. 다음과 같이 type을 사용하면 객체(인스턴스)가 어떤 클래스인지 확인할 수 있습니다.

type(객체)
"""
a = 10
type(a)                     # <class 'int'>

b = [0, 1, 2]
type(b)                     # <<class 'list'>

c = {'x' : 10, 'y' : 20}
type(c)                     # <class 'dict'>

maria = Person()
type(maria)                 # <class '__main__.Person' >




### 34.1.3  인스턴스와 객체의 차이점?
"""
클래스는 객체를 표현하는 문법이라고 했는데, 클래스로 인스턴스를 만든다고 하니 좀 헷갈리죠? 사실 인스턴스와 객체는 같은 것을 뜻합니다.

보통 객체만 지칭할 때는 그냥 객체(object)라고 부릅니다. 
하지만 클래스와 연관지어서 말할 때는 인스턴스(instance)라고 부릅니다.

그래서 다음과 같이 리스트 변수 a, b가 있으면 a, b는 객체입니다. 그리고 a와 b는 list 클래스의 인스턴스입니다.
"""
a = list(range(10))
b = list(range(10))




#### 참고 : 빈 클래스 만들기
""" 내용이 없는 빈 클래스를 만들 때는 코드 부분에 pass를 넣어줍니다. """
class Person :
    pass




#### 참고 : 메서드 안에서 메서드 호출하기
"""
메서드 안에서 메서드를 호출할 때는 다음과 같이 self.메서드() 형식으로 호출해야 합니다.
self 없이 메서드 이름만 사용하면 클래스 바깥쪽에 있는 함수를 호출한다는 뜻이 되므로 주의해야 합니다.
"""
class Person :
    def greeting(self) :
        print('Hello')

    def hello(self) :
        self.greeting()         # self.메서드() 형식으로 클래스 안의 메서드를 호출




#### 특정 클래스의 인스턴스인지 확인하기
""" 현재 인스턴스가 특정 클래스의 인스턴스인지 확인할 때는 isinstance 함수를 사용합니다. 특정 클래스의 인스턴스가 맞으면 True, 아니면 False를 반환합니다. """
class Person:
    pass

james = Person()
print(isinstance(james, Person))


"""
isinstance는 주로 객체의 자료형을 판단할 때 사용합니다.
예를 들어 팩토리얼 함수는 1부터 n까지 양의 정수를 차례대로 곱해야 하는데, 실수와 음의 정수는 계산할 수 없습니다.
이런 경우에 isinstance를 사용하여 숫자(객체)가 정수일 때만 계산하도록 만들 수 있습니다.
"""
def factorial(n):       # 매개변수 n 추가
    if not isinstance(n, int) or n < 0:     # n이 정수가 아니거나 음수일 경우 None을 반환
        return None
    if n == 1 :     # 종료 조건 : n이 1이면 재귀 종료
        return 1
    return n * factorial(n - 1)     # 재귀 호출: n * factorial(n - 1)
"""
----- 코드 흐름 및 설명 -----

(1) def factorial(n) :
    - factorial이라는 이름의 함수를 정의합니다.
    - 매개변수 n을 입력받아 팩토리얼 계산을 수행합니다.
    - 여기서 n은 팩토리얼을 계산할 숫자입니다.

(2) if not isinstance(n, int) or n < 0:
    - isinstance(n, int)는 n이 정수인지 확인합니다.
    - or n < 0는 n이 음수인지 확인합니다.(음수의 팩토리얼은 수학적으로 정의되지 않으므로 처리한다)
    - n이 정수가 아니거나 음수라면 if 조건이 참(True)이 됩니다.

(3) return None
    - 위 조건이 참이면, 함수는 실행을 멈추고 None을 반환합니다.

(4) if n == 1:
        return 1
    - 팩토리얼 계산을 멈추는 조건(재귀 종료 조건)을 설정합니다.
    - 이 조건이 참이면, 더 이상 계산하지 않고 1을 반환합니다.
        · 수학적으로 1! = 1입니다.(파이썬 에서의 팩토리얼 계산을 수학적 정의로 표현 한 것이며, 팩토리얼 계산은 재귀적으로 이루어 지기 때문에 멈추는 기준이 되는 역할을 한다)

(5) return n * factorial(n - 1)
    - 현재 값(n)과 바로 이전 값의 팩토리얼을 곱하는 과정입니다.
    - 이 줄은 재귀 호출을 사용합니다.
        · 함수가 자기 자신을 다시 호출합니다.
        · 매번 n값을 1씩 줄여가며 계산합니다.
    - 재귀는 n == 1 조건에 도달하면 멈춥니다.
"""
