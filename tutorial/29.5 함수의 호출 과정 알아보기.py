## 29.5 함수의 호출 과정 알아보기
"""
지금까지 함수를 만드는 방법을 알아보았습니다. 이번에는 함수 여러 개를 만든 뒤에 각 함수의 호출 과정을 스택 다이어그램(stack diagram)으로 알아보겠습니다.
스택은 접시 쌓기와 같은데 접시를 차곡차곡 쌓고 꺼낼 때는 위쪽부터 차례대로 꺼내는 방식입니다(단, 중간에 있는 접시는 뺄 수 없습니다).
파이썬에서는 접시 쌓기와 방향이 반대인데, 함수가 아래쪽 방향으로 추가되고 함수가 끝나면 위쪽 방향으로 사라집니다.
다음은 덧셈 함수 add와 곱셈 함수 mul이 있고, add 함수 안에서 mul 함수를 호출하는 방식으로 만들어져 있습니다.
"""
def mul(a, b) :
    c = a * b
    return c

def add(a, b) :
    c = a +b
    print(c)
    d = mul(a, b)
    print(d)

x = 10
y = 20

add(x, y)
"""
mul 함수
(1) def mul(a, b) :
    - mul이라는 이름의 함수 정의
    - mul 함수는 두 개의 매개변수 a와 b를 받음
    - 매개변수는 함수를 호출할 때 함수 외부에서 값을 받아들이는 역할을 함

(2) c = a * b
    return c
    - 함수가 호출될 때 받은 a와 b의 값을 곱해서 c에 저장
    - 함수의 실행을 끝내고, 계산된 결과 c를 함수 밖으로 돌려줌
    - return을 사용해 값을 반환하면 함수 외부에서도 그 결과를 사용할 수 있음

add 함수
(1) def add(a, b) :
    - add라는 이름의 함수를 정의
    - add 함수는 두 개의 매개변수 a와 b를 받음
    - 매개변수는 함수를 호출할 때 함수 외부에서 값을 받아들이는 역할을 함

(2) c = a +b
    print(c)
    - 함수가 호출될 때 받은 a와 b의 값을 더해서 c에 저장
    - c의 값을 화면에 출력

(3) d = mul(a, b)
    print(d)
    - mul 함수를 호출하여 a * b의 곱셈 결과를 d에 저장
    - mul 함수가 실행되면, 곱셈 결과가 return으로 d에 저장
    - d의 값을 화면에 출력

변수 정의
(1) x = 10
    y = 20
    - x와 y는 함수 외부에서 정의된 전역 변수로, 각각 10과 20의 값을 가짐
    - 이 값들은 이후에 add 함수를 호출할 때 인수로 전달

함수 호출
(1) add(x, y)
    - add(x, y)를 호출하면서 x와 y의 값을 각각 a와 b에 전달 / 즉, add(10, 20)이 호출된 것과 동일
    - 함수 호출에 따라, 함수가 실행되면서 덧셈 결과와 곱셈 결과를 순서대로 출력

    
최종 출력 결과
(1) 30
(2) 200
    - c = 10 + 20이 계산되고, print(c)로 30이 출력
    - mul(10, 20)이 호출되고, d = 10 * 20의 결과가 d에 저장되며, print(d)로 200이 출력
    - add 함수가 x=10, y=20을 인수로 받아 덧셈과 곱셈을 수행하여 화면에 출력한 결과

설명
    파이썬 스크립트를 실행하면 컴퓨터가 코드를 한 줄씩 순서대로 읽고 실행합니다.
    def mul(a, b) : 부터 y = 20까지 실행하면 컴퓨터는 이 줄들을 차례로 실행하게 됩니다.

    여기서 중요한 개념이 하나 나오는데 전역 프레임 (global frame)이라는 것입니다. 
    전역 프레임은 일종의 큰 상자처럼 생각할 수 있습니다. 이 상자는 코드가 실행되면서 생성된 모든 함수와 변수를 담고 있습니다.
    코드의 첫 번째 줄부터 실행하면서 변수가 만들어지거나 함수가 정의되면, 전역 프레임 안에 차곡차곡 저장됩니다.
    함수 mul과 add: 이 함수들은 코드 안에서 정의된 것이기 때문에 전역 프레임에 들어갑니다. 다만, 이 시점에서는 아직 호출되지 않았습니다.
    즉, 생성만 되어 전역 프레임에 존재하지만 실제로 실행된 것은 아닙니다.
    요약하자면, 코드가 위에서 아래로 실행될 때 전역 프레임에 함수와 변수가 차례로 저장되고, 함수가 생성되었어도 호출되지 않으면 아직 실행된 것은 아닙니다.
    
    이제 함수 add를 호출해봅시다. 함수 add가 호출되면 파이썬은 스택 프레임(stack frame)이라고 불리는 별도의 공간을 만들어 줍니다.
    이 공간은 함수 add가 실행되는 동안만 존재하며, 함수가 끝나면 없어집니다.
    add 함수의 스택 프레임에는 다음 요소들이 들어갑니다.
    매개변수 a와 b: add 함수가 호출될 때 전달된 값들이 각각 a와 b에 저장됩니다.
    변수 c: c는 a와 b의 합을 저장하는 변수로, add 함수 안에서만 사용되는 변수입니다.
    이제 add 함수 안에서 print(c)가 실행되면, c의 값이 출력되고, 함수가 끝나면서 add의 스택 프레임은 메모리에서 사라집니다. 


"""

"""

"""



"""
전역 프레임 (global frame): 프로그램 실행 시 생성되는 메모리 공간입니다. 전역 변수를 포함하여 프로그램 전체에서 접근할 수 있는 함수, 클래스, 모듈 등과 같은 전역적으로 정의된 것들이 저장되는 프레임입니다. 파이썬에서 프로그램이 시작되면 전역 프레임이 생성되고, 모든 전역 변수와 함수 정의가 이 공간에 할당됩니다.
"""
