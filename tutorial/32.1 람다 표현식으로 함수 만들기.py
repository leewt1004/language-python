# #Unit 32. 람다 표현식 사용하기
# """
# 지금까지 def로 함수를 정의해서 사용했습니다. 이번에는 람다 표현식으로 익명 함수를 만드는 방법을 알아보겠습니다.
# 람다 표현식은 식 형태로 되어 있다고 해서 람다 표현식(lambda expression)이라고 부릅니다.
# 특히 람다 표현식은 함수를 간편하게 작성할 수 있어서 다른 함수의 인수로 넣을 때 주로 사용합니다.
# """




# ## 32.1 람다 표현식으로 함수 만들기
# """
# 람다 표현식을 사용하기 전에 먼저 숫자를 받은 뒤 10을 더해서 반환하는 함수 plus_ten을 만들어보겠습니다.
# return x + 10으로 매개변수 x에 10을 더한 값을 반환하는 간단한 함수입니다.
# """
# def plus_ten(x) :
#     return x + 10

# print(plus_ten(1))

# """
# 그럼 이 plus_ten 함수를 람다 표현식으로 작성해보겠습니다. 람다 표현식은 다음과 같이 lambda에 매개변수를 지정하고 :(콜론) 뒤에 반환값으로 사용할 식을 지정합니다.
# 실행을 해보면 함수 객체가 나오는데, 이 상태로는 함수를 호출할 수 없습니다. 왜냐하면 람다 표현식은 이름이 없는 함수를 만들기 때문입니다.
# 그래서 람다 표현식을 익명 함수(anonymous function)로 부르기도 합니다.

# lambda 매개변수들: 식
# """
# lambda x : x + 10

# """ lambda로 만든 익명 함수를 호출하려면 다음과 같이 람다 표현식을 변수에 할당해주면 됩니다. """
# plus_ten = lambda x : x + 10
# print(plus_ten(1))
# """
# ----- 코드 흐름 및 설명 -----

# (1) plus_ten = lambda x : x + 10
#     - 람다 표현식을 변수에 할당한다.
#     - 이 람다 표현식의 매개변수 x를 입력받아, x + 10의 값을 반환한다.

# (2) print(plus_ten(1))
#     - plus_ten에 1을 입력하면 1 + 10 = 11이 계산된다.
#     - 결과값 11이 출력된다.

# (3) 설명
#     lambda x: x + 10은 매개변수 x 하나를 받고, x에 10을 더해서 반환한다는 뜻입니다.
#     즉, 매개변수, 연산자, 값 등을 조합한 식으로 반환값을 만드는 방식입니다.
# """




# ### 32.1.1  람다 표현식 자체를 호출하기
# """
# 람다 표현식은 변수에 할당하지 않고 람다 표현식 자체를 바로 호출할 수 있습니다. 다음과 같이 람다 표현식을 ( )(괄호)로 묶은 뒤에 다시 ( )를 붙이고 인수를 넣어서 호출하면 됩니다.
# 출력 결과를 확인하고 싶을 땐 print()함수로 감싸주면됩니다.
# (lambda 매개변수들 : 식)(인수들)
# """
# (lambda x : x + 10)(1)          # 출력 결과 확인 : print((lambda x : x + 10)(1))




# ### 32.1.2  람다 표현식 안에서는 변수를 만들 수 없다
# """
# 람다 표현식에서 주의할 점은 람다 표현식 안에서는 새 변수를 만들 수 없다는 점입니다. 따라서 반환값 부분은 변수 없이 식 한 줄로 표현할 수 있어야 합니다. 변수가 필요한 코드일 경우에는 def로 함수를 작성하는 것이 좋습니다.
# 단, 람다 표현식 바깥에 있는 변수는 사용할 수 있습니다.
# """
# (lambda x : y = 10; x + y)(1)       # error

# y = 10
# (lambda x : x + y)(1)               # 매개변수 x와 람다 표현식 바깥에 있는 변수 y를 더해서 반환합니다.
#                                     # 출력 결과 확인 : print((lambda x : x + 10)(1))




### 32.1.3  람다 표현식을 인수로 사용하기
"""
람다 표현식을 사용하는 이유는 함수의 인수 부분에서 간단하게 함수를 만들기 위해서 입니다. 이런 방식으로 사용하는 대표적인 예가 map입니다.

람다 표현식을 사용하기 전에 먼저 def로 함수를 만들어서 map을 사용해보겠습니다. 
다음과 같이 숫자를 받은 뒤 10을 더해서 반환하는 함수 plus_ten을 작성합니다. 
그리고 map에 plus_ten 함수와 리스트 [1, 2, 3]을 넣습니다. 물론 map의 결과는 map 객체이므로 눈으로 확인할 수 있도록 list를 사용해서 리스트로 변환해줍니다.
"""
def plus_ten(x) :
    return x + 10

print(list(map(plus_ten, [1, 2, 3])))
"""
----- 코드 흐름 및 설명 -----

(1) def plus_ten(x) :
    - 함수를 정의합니다. 이 함수는 하나의 매개변수 x를 받습니다.

(2) return x + 10
    - 입력받은 값 x에 10을 더한 결과를 반환합니다.

(3) print(list(map(plus_ten, [1, 2, 3])))
    - map 함수는 리스트 [1, 2, 3]의 각 요소에 대해 plus_ten 함수를 적용한 결과를 반환합니다.
    - 반환값은 map 객체이며, 이를 list 함수로 변환하여 [11, 12, 13]이라는 리스트를 생성합니다.
    - 최종적으로 print 함수를 통해 결과를 출력합니다.

plus_ten 함수는 매개변수 x에 10을 더해서 반환하므로 리스트 [1, 2, 3]이 [11, 12, 13]으로 바뀌었습니다.
지금까지 map을 사용할 때 map(str, [1, 2, 3])와 같이 자료형 int, float, str 등을 넣었죠? 사실 plus_ten처럼 함수를 직접 만들어서 넣어도 됩니다.
"""


""" 
이제 람다 표현식으로 함수를 만들어서 map에 넣어보겠습니다. 
plus_ten 함수 대신 람다 표현식 lambda x: x + 10을 넣었습니다. 전체적으로 보면 코드가 세 줄에서 한 줄로 줄었죠? 이처럼 람다 표현식은 함수를 다른 함수의 인수로 넣을 때 매우 편리합니다
"""
print(list(map(lambda x : x + 10, [1, 2, 3])))




#### 참고 : 람다 표현식으로 매개변수가 없는 함수 만들기
"""
람다 표현식으로 매개변수가 없는 함수를 만들 때는 lambda 뒤에 아무것도 지정하지 않고 :(콜론)을 붙입니다.
단, 콜론 뒤에는 반드시 반환할 값이 있어야 합니다. 왜냐하면 표현식(expression)은 반드시 값으로 평가되어야 하기 때문입니다.
"""
print((lambda : 1)())
"""
----- 코드 흐름 및 설명 -----

(1) (lambda : 1)():
    - 정의한 람다 함수 (lambda : 1)를 바로 호출하기 위해 뒤에 ()를 붙였습니다.
    - 결과적으로 이 표현식은 1을 반환합니다.

(2) print
    - 반환된 값 1을 출력합니다.
"""


x = 10
print((lambda : x)())
"""
----- 코드 흐름 및 설명 -----

(1) x = 10
    - 변수 x에 값 10을 할당합니다.

(2)lambda : x
    - 매개변수가 없는 람다 표현식입니다.
    - x는 함수 외부에서 정의된 변수입니다.
    - 이 람다 함수는 호출될 때 외부 변수 x의 값을 반환합니다.

(3) (lambda : x)()
    - 정의한 람다 함수 (lambda : x)를 호출합니다. 이때 반환값은 x의 현재 값인 10입니다.

(4) print
    - 반환된 값 10을 출력합니다.
"""
