## 7.2 줄바꿈 활용하기

"""
print의 sep에 개행 문자(\n)라는 특별한 문자를 지정하면 값을 한 줄에 하나씩 출력할 수 있습니다.
\n은 값을 다음 줄에 출력하게 만드는 제어 문자입니다.
\n 자체는 제어 문자이므로 화면에 출력되지 않습니다.
"""
print(1, 2, 3)
print(1, 2, 3, sep = '\n')

"""
참고로 \n도 문자이므로 print에 바로 넣어서 사용할 수도 있습니다.
\n은 옆에 다른 문자나 숫자와 붙여서 씁니다. 만약 \n 양 옆에 공백을 넣어버리면 공백이 그대로 출력되므로 주의해야 합니다.
"""
print('1\n2\n3') # 문자열 안에 \n을 사용하여 줄바꿈

#### 참고 : 제어문자
"""
제어 문자는 화면에 출력되지는 않지만 출력 결과를 제어한다고 해서 제어 문자라 부릅니다. 또한, 제어 문자는 \로 시작하는 이스케이프 시퀀스입니다
\n : 다음 줄로 이동하며 개행이라고도 부릅니다.
\t : 탭 문자, 키보드의 Tab 키와 같으며 여러 칸을 띄웁니다.
\\ : \ 문자 자체를 출력할 때는 \를 두번 써야 합니다.
"""

### 7.2.1 end사용하기
"""
print는 기본적으로 출력하는 값 끝에 \n을 붙입니다. 그래서 print를 여러 번 사용하면 값이 여러 줄에 출력됩니다.
"""
print(1)
print(2)
print(3)

"""

print(값, end='문자 또는 문자열')
print(변수, end='문자 또는 문자열')
"""
print(1, end = '')  # end에 빈 문자열을 지정하면 다음 번 출력이 바로 뒤에 오게 됨
print(2, end = '')
"""
end=''와 같이 end에 빈 문자열을 지정하면 1, 2, 3이 세 줄로 출력되지 않고 한 줄로 붙어서 출력됩니다. 
기본적으로 print의 end에 \n이 지정된 상태인데 빈 문자열을 지정하면 강제로 \n을 지워주기 때문입니다.
즉, end는 현재 print가 끝난 뒤 그 다음에 오는 print 함수에 영향을 줍니다. 만약 1 2 3 사이를 띄워주고 싶다면 end에 공백 한 칸을 지정하면 됩니다.
"""
print(1, end = ' ') # end에 공백 한 칸 지정
print(2, end = ' ')

"""
이처럼 print의 sep, end에 제어 문자, 공백 문자 등을 조합하면 다양한 형태로 값을 출력할 수 있습니다. 
자신의 상황에 맞게 선택해서 사용하면 됩니다.
"""
