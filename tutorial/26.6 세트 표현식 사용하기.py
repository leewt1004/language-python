## 26.6 세트 표현식 사용하기
"""
세트는 for 반복문과 if 조건문을 사용하여 세트를 생성할 수 있습니다. 다음과 같이 세트 안에 식과 for 반복문을 지정하면 됩니다.
{ } 또는 set() 안에 식, for, 변수, in, 반복 가능한 객체를 지정하여 세트를 생성합니다.

{식 for 변수 in 반복가능한객체}
set(식 for 변수 in 반복가능한객체)
"""
a = {i for i in 'apple'}
print(a)                    # {'l', 'p', 'e', 'a'} / 문자열에서 중복된 문자는 세트에 포함되지 않습니다.




### 26.6.1  세트 표현식에 if 조건문 사용하기
"""
세트 표현식에서 if 조건문을 사용해보겠습니다. 다음과 같이 if 조건문은 for 반복문 뒤에 지정합니다.

{식 for 변수 in 세트 if 조건식}
set(식 for 변수 in 세트 if 조건식)
"""
a = {i for i in 'pineapple' if i not in 'apl'}
print(a)                    # {'e', 'i', 'n'}

"""
{i for i in 'pineapple'} 
-> 이 부분은 pineapple 문자열의 각 문자 i를 순서대로 집합 a에 넣습니다. 집합은 중복을 허용하지 않으므로, 중복되는 문자는 한 번만 저장됩니다.

if i not in 'apl'
-> i가 'apl'에 포함되어 있지 않을 때만 i를 집합에 넣습니다.즉, 'a', 'p', 'l' 문자들은 건너뛰고, 나머지 문자들만 집합 a에 추가됩니다.

{i for i in 'pineapple' if i not in 'apl'}
-> {i for i in 'pineapple' if i != 'a' and i != 'p' and i != 'l'} 같이 하나씩 비교하고 and로 연결하는 조건문과 같습니다. 

for 반복문 뒤에 if 조건문을 지정하면 if 조건문에서 특정 요소를 제외한 뒤 세트를 생성합니다.
"""




""" 아무래도 세트는 리스트와 딕셔너리보다 사용 빈도가 낮습니다. 여기서는 세트가 수학의 집합을 자료형으로 만든 것이라는 정도만 알아두면 됩니다. 나중에 세트가 필요할 때 다시 돌아와서 찾아보세요. """
