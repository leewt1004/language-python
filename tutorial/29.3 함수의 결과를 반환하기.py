## 29.3 함수의 결과를 반환하기
"""
앞에서 만든 add 함수는 두 수를 더해서 바로 출력했습니다. 그러면 함수에서 값을 꺼내 올 수는 없을까요?
다음과 같이 함수 안에서 return을 사용하면 값을 함수 바깥으로 반환합니다(return에 값을 지정하지 않으면 None을 반환).
그럼 두 수를 더해서 반환하는 add 함수를 만들어보겠습니다.

def 함수이름(매개변수) :
    return 반환값
"""
def add(a, b) :
    return a + b
x = add(10, 20)
print(x)                # 출력 : 30
"""
(1) def add(a, b) :
    - 함수 이름을 add로하고, a, b 매개변수 지정
    - ()안에 변수 이름을 매개변수(parameter)라고 함

(2) return a + b
    - return으로 a와 b를 더한 값을 반환

(3) x = add(10, 20)
    - 변수에 add함수와 인수값을 저장

(4) print(x)
    - x값 출력

(5) 설명
    x의 값을 출력해보면 10과 20을 더한 값인 30이 나옵니다. 이처럼 return을 사용하면 값을 함수 바깥으로 반환할 수 있고, 함수에서 나온 값을 변수에 저장할 수 있습니다.
    즉, return으로 반환하는 값은 반환값이라고 하며 함수를 호출해준 바깥에 결과를 알려주기 위해 사용합니다.
"""

""" 반환값은 변수에 저장하지 않고 바로 다른 함수에 넣을 수도 있습니다. """
def add(a, b) :
    return a + b
print(add(10, 20))          # print()함수에서 바로 add()함수를 호출하여 결과를 출력 / 출력 : 30




#### 참고 : 반환값이 없는 함수와 반환값이 있는 함수의 차이점
"""
(1) 반환값이 없는 함수
def add(a, b):
    print(a + b)
add(10, 20)

(2) 반환값이 있는 함수
def add(a, b) :
    return a + b
x = add(10, 20)
print(x) 

(3) 차이점
    - 반환값이 없는 함수 (1)의 경우에는 그 순간만 화면에 출려되며, 이후에 사용할 수 없음
    - 반환값이 있는 함수 (2)의 경우에는 결과를 반환하여 변수에 저장하고, 이후 코드에서 재사용 및 다른 함수와의 연계 사용 가능
"""




#### 참고 : 매개변수는 없고 반환값만 있는 함수
"""
함수를 만들 때 매개변수는 없지만 값만 반환하는 함수를 만들 수도 있습니다. 
매개변수 없이 반환값만 있는 함수는 입력이 필요하지 않은 일정한 값, 랜덤 값, 시간 정보, 상태 확인 등을 제공할 때 유용합니다.
주로 반복적으로 사용되는 값이나 여러 곳에서 참조할 필요가 있는 값을 제공하는 데 활용됩니다.
"""
def one() :
    return 1
x = one()
print(x)




#### 참고 : return으로 함수 중간에서 빠져나오기
"""
return은 값을 반환하는 기능뿐만 아니라 함수 중간에서 바로 빠져나오는 기능도 있습니다.
return은 함수 중간에서 빠져나올 때 자주 사용합니다. 보통은 if와 조합해서 특정 조건일 때 함수 중간에서 빠져나옵니다.
특정 조건을 만족할 때 함수 실행을 즉시 종료하고, 원하는 값을 반환할 수 있도록 하기 위함입니다.
이렇게 하면 불필요한 코드 실행을 방지하고, 코드를 더 효율적으로 작성할 수 있습니다.

"""
def not_ten(a) :
    if a == 10 :
        return
    print(a, '입니다.',sep='')
not_ten(5)              # 출력 : 5입니다.
not_ten(10)             # 출력 : 없음
