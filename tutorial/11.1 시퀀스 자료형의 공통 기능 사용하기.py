# Unit 11. 시퀀스 자료형 활용하기
"""
리스트, 튜플, range, 문자열을 잘 보면 공통점이 있습니다. 이들 모두 값이 연속적(sequence)으로 이어져 있다는 점입니다.
리스트, 튜플, range, 문자열처럼 값이 연속적으로 이어진 자료형을 시퀀스 자료형(sequence types)라고 부릅니다.
"""


## 11.1 시퀀스 자료형의 공통 기능 사용하기
"""
시퀀스 자료형의 가장 큰 특징은 공통된 동작과 기능을 제공한다는 점입니다. 
따라서 시퀀스 자료형의 기본적인 사용 방법을 익혀 두면 나중에 어떠한 시퀀스 자료형을 접하게 되더라도 큰 어려움 없이 바로 사용할 수 있습니다.
시퀀스 자료형으로 만든 객체를 시퀀스 객체라고 하며, 시퀀스 객체에 들어있는 각 값을 요소(element)라고 부릅니다.
"""


### 11.1.1 특정 값이 있는지 확인하기
"""
값 in 시퀀스객체
값 not in 시퀀스객체
"""
""" 시퀀스 객체에 in 연산자를 사용했을 때 특정 값이 있으면 True, 없으면 False가 나옵니다. """
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
30 in a # True
100 in a # False

""" in 앞에 not을 붙이면 특정 값이 없는지 확인합니다. not in은 특정 값이 없으면 True, 있으면 False가 나옵니다. """
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
100 not in a # True
30 not in a # False

""" 튜플, range, 문자열도 같은 방법으로 활용할 수 있습니다. """
43 in (38, 76, 43, 62, 19) # True
1 in range(10) # True
'P' in 'Hello Python' # True


### 11.1.2 시퀀스 객체 연결하기
"""
시퀀스 객체는 + 연산자를 사용하여 객체를 서로 연결하여 새 객체를 만들 수 있습니다.
시퀀스객체1 + 시퀀스객체2
"""
a = [0, 10, 20, 30]
b = [9, 8, 7, 6]
a + b # [0, 10, 20, 30, 9, 8, 7, 6]

"""
시퀀스 자료형 중에서 range는 + 연산자로 객체를 연결할 수 없습니다.
range를 리스트 또는 튜플로 만들어서 연결하면 됩니다.
"""
range(0, 10) + range(10, 20) # error
list(range(0, 10)) + list(range(10, 20))
tuple(range(0, 10)) + tuple(range(10, 20))

""" 문자열은 + 연산자로 여러 문자열을 연결할 수 있습니다. """
'Hello' + 'world!'

#### 참고 : 문자열에 숫자 연결하기
'Hello' + 10 # error
""" 이 문제를 해결하려면 str을 사용하여 숫자(정수, 실수)를 문자열로 변환하면 됩니다. """
'Hello' + str(10) # str을 사용하여 정수를 문자열로 변환
'Hello' + str(1.5)  # str을 사용하여 실수를 문자열로 변환


### 11.1.3 시퀀스 객체 반복하기
"""
* 연산자는 시퀀스 객체를 특정 횟수만큼 반복하여 새 시퀀스 객체를 만듭니다(0 또는 음수를 곱하면 빈 객체가 나오며 실수는 곱할 수 없습니다).
시퀀스객체 * 정수
정수 * 시퀀스객체
"""
[0, 10, 20, 30] * 3 # [0, 10, 20, 30, 0, 10, 20, 30, 0, 10, 20, 30]

""" range는 * 연산자를 사용하여 반복할 수 없습니다.  range를 리스트 또는 튜플로 만들어서 반복하면 됩니다. """
range(0, 5, 2) * 3 # error
list(range(0,5,2)) * 3 # [0, 2, 4, 0, 2, 4, 0, 2, 4]
tuple(range(0, 5, 2)) * 3 # (0, 2, 4, 0, 2, 4, 0, 2, 4)

""" 문자열은 * 연산자를 사용하여 반복할 수 있습니다. """
'Hello' * 3 
